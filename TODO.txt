Objective

Develop a React Native Video Diary App where users can:
• Import videos,
• Crop a specific segment of 5 seconds,
• Add details such as name and description,
• Save cropped videos to a list for future reference

---
Main Features

Main Screen: Cropped Video List
• Display a list of previously cropped videos.
• Implement persistent storage (e.g., Zustand with AsyncStorage or an alternative state management solution).
• Allow users to tap a video in the list to navigate to the Details Page.

Details Page
• Display the selected video with its:
• Name,
• Description.
• Keep the UI minimalistic, focusing on the video and its associated metadata

Crop Modal
  Step 1: Video Selection
  • Allow users to select a video from their device.
  
  Step 2: Video Cropping
  • Display the video with a scrubber allowing users to select the start and end points for a 5-second segment.
  • Below the scrubber, include a button to proceed to the next step.
  
  Step 3: Add Metadata
  • Include two input fields:
  • Name (text input),
  • Description (text area).
  • Add a button to execute the cropping operation.

Video Cropping
• Implement video cropping functionality using FFMPEG.
• The FFMPEG script should execute via Tanstack Query, ensuring asynchronous operations and a robust API
integration.

Bonus features
  Edit Page (Optional)
  • Add a page allowing users to edit the Name and Description of a cropped video.
  • Include a form with two inputs:
  • Name
  • Description
  • Persist updates to storage.

Enhancements
  • Use Expo SQLite for storing and reading video data.
  • Integrate React Native Reanimated for smoother animations.
  • Use Zod or Yup for form input validation.

---

Core Technologies
• Expo: Base framework for React Native development. +
• Expo Router: For implementing app navigation. +
• NativeWind: Styling solution. +
• Expo Video: Video rendering and playback (or any suitable alternative). +
• Tanstack Query: To manage async logic and the FFMPEG cropping process. +
• Zustand: State management solution. +
• FFMPEG: Core library for video processing. <---

Bonus Technologies
• Expo SQLite: For structured, persistent storage.
• React Native Reanimated: For animations.
• Zod/Yup: Validation schemas for form handling

---
Key Considerations

Scalability
• Ensure the app can handle a growing list of cropped videos efficiently.
• Abstract key features into reusable components (e.g., VideoPlayer, MetadataForm).

Performance
• Optimize video cropping using FFMPEG.
• Use efficient libraries like Tanstack Query to handle background processing.

Usability
• Simplify navigation and UX design for intuitive user interactions.
• Use NativeWind for clean and responsive styling.

Validation
• Use Zod or Yup to validate user inputs for metadata (e.g., Name and Description).

---

Deliverables
• A functional React Native app with all specified features.
• Bonus features (if implemented) for enhanced functionality.
• Clean and modular codebase adhering to best practices.
• Documentation for setup and usage instructions

---

- structure app and build main page <---
- Add ffmpeg pkg 
- Fix lint and type errors
- Optimize
- Test